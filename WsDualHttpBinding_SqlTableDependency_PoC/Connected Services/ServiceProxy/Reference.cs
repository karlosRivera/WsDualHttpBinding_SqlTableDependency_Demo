//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WsDualHttpBinding_SqlTableDependency_PoC.WPF.ServiceProxy {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Patient", Namespace="http://schemas.datacontract.org/2004/07/WsDualHttpBinding_SqlTableDependency_PoC." +
        "WCF.Entities")]
    [System.SerializableAttribute()]
    public partial class Patient : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> DateOfBirthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SortOrderField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> DateOfBirth {
            get {
                return this.DateOfBirthField;
            }
            set {
                if ((this.DateOfBirthField.Equals(value) != true)) {
                    this.DateOfBirthField = value;
                    this.RaisePropertyChanged("DateOfBirth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SortOrder {
            get {
                return this.SortOrderField;
            }
            set {
                if ((this.SortOrderField.Equals(value) != true)) {
                    this.SortOrderField = value;
                    this.RaisePropertyChanged("SortOrder");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceProxy.IPatientService", CallbackContract=typeof(WsDualHttpBinding_SqlTableDependency_PoC.WPF.ServiceProxy.IPatientServiceCallback))]
    public interface IPatientService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/Subscribe", ReplyAction="http://tempuri.org/IPatientService/SubscribeResponse")]
        void Subscribe();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/Subscribe", ReplyAction="http://tempuri.org/IPatientService/SubscribeResponse")]
        System.Threading.Tasks.Task SubscribeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/Unsubscribe", ReplyAction="http://tempuri.org/IPatientService/UnsubscribeResponse")]
        void Unsubscribe();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/Unsubscribe", ReplyAction="http://tempuri.org/IPatientService/UnsubscribeResponse")]
        System.Threading.Tasks.Task UnsubscribeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/GetAllPatients", ReplyAction="http://tempuri.org/IPatientService/GetAllPatientsResponse")]
        WsDualHttpBinding_SqlTableDependency_PoC.WPF.ServiceProxy.Patient[] GetAllPatients();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/GetAllPatients", ReplyAction="http://tempuri.org/IPatientService/GetAllPatientsResponse")]
        System.Threading.Tasks.Task<WsDualHttpBinding_SqlTableDependency_PoC.WPF.ServiceProxy.Patient[]> GetAllPatientsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/PublishPatientChange", ReplyAction="http://tempuri.org/IPatientService/PublishPatientChangeResponse")]
        void PublishPatientChange(WsDualHttpBinding_SqlTableDependency_PoC.WPF.ServiceProxy.Patient changedPatient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/PublishPatientChange", ReplyAction="http://tempuri.org/IPatientService/PublishPatientChangeResponse")]
        System.Threading.Tasks.Task PublishPatientChangeAsync(WsDualHttpBinding_SqlTableDependency_PoC.WPF.ServiceProxy.Patient changedPatient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/NotifyOthers", ReplyAction="http://tempuri.org/IPatientService/NotifyOthersResponse")]
        void NotifyOthers(string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/NotifyOthers", ReplyAction="http://tempuri.org/IPatientService/NotifyOthersResponse")]
        System.Threading.Tasks.Task NotifyOthersAsync(string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPatientServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/PatientChange", ReplyAction="http://tempuri.org/IPatientService/PatientChangeResponse")]
        void PatientChange(WsDualHttpBinding_SqlTableDependency_PoC.WPF.ServiceProxy.Patient changedPatient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPatientService/NotificationReceived", ReplyAction="http://tempuri.org/IPatientService/NotificationReceivedResponse")]
        void NotificationReceived(string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPatientServiceChannel : WsDualHttpBinding_SqlTableDependency_PoC.WPF.ServiceProxy.IPatientService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PatientServiceClient : System.ServiceModel.DuplexClientBase<WsDualHttpBinding_SqlTableDependency_PoC.WPF.ServiceProxy.IPatientService>, WsDualHttpBinding_SqlTableDependency_PoC.WPF.ServiceProxy.IPatientService {
        
        public PatientServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public PatientServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public PatientServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PatientServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PatientServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Subscribe() {
            base.Channel.Subscribe();
        }
        
        public System.Threading.Tasks.Task SubscribeAsync() {
            return base.Channel.SubscribeAsync();
        }
        
        public void Unsubscribe() {
            base.Channel.Unsubscribe();
        }
        
        public System.Threading.Tasks.Task UnsubscribeAsync() {
            return base.Channel.UnsubscribeAsync();
        }
        
        public WsDualHttpBinding_SqlTableDependency_PoC.WPF.ServiceProxy.Patient[] GetAllPatients() {
            return base.Channel.GetAllPatients();
        }
        
        public System.Threading.Tasks.Task<WsDualHttpBinding_SqlTableDependency_PoC.WPF.ServiceProxy.Patient[]> GetAllPatientsAsync() {
            return base.Channel.GetAllPatientsAsync();
        }
        
        public void PublishPatientChange(WsDualHttpBinding_SqlTableDependency_PoC.WPF.ServiceProxy.Patient changedPatient) {
            base.Channel.PublishPatientChange(changedPatient);
        }
        
        public System.Threading.Tasks.Task PublishPatientChangeAsync(WsDualHttpBinding_SqlTableDependency_PoC.WPF.ServiceProxy.Patient changedPatient) {
            return base.Channel.PublishPatientChangeAsync(changedPatient);
        }
        
        public void NotifyOthers(string message) {
            base.Channel.NotifyOthers(message);
        }
        
        public System.Threading.Tasks.Task NotifyOthersAsync(string message) {
            return base.Channel.NotifyOthersAsync(message);
        }
    }
}
